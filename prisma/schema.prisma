generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?     @map("email_verified")
  image         String?
  password      String?
  accounts      Account[]
  sessions      Session[]
  roles         UserOnRoles[] // 关联表 UserOnRoles
  is2fa         Boolean       @default(false)
  Blog          Blog[]

  @@map("users")
}

model Role {
  roleKey String        @id @unique
  name    String
  users   UserOnRoles[] // 关联表 UserOnRoles

  @@map("role")
}

model UserOnRoles {
  userId  String
  roleKey String
  user    User   @relation(fields: [userId], references: [id])
  role    Role   @relation(fields: [roleKey], references: [roleKey])

  @@id([userId, roleKey]) // 复合主键
  @@map("user_on_roles") // 可以自定义连接表名
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Tag {
  id          String        @id @default(cuid())
  name        String
  BlogsOnTags BlogsOnTags[]

  @@map("tags")
}

model Blog {
  id          String        @id @default(cuid())
  title       String
  thumbnail   String
  description String
  content     String        @db.Text
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  BlogsOnTags BlogsOnTags[]
  authorId    String
  author      User          @relation(fields: [authorId], references: [id])

  @@map("blogs")
}

model BlogsOnTags {
  blogId String
  tagId  String
  blog   Blog   @relation(fields: [blogId], references: [id])
  tag    Tag    @relation(fields: [tagId], references: [id])

  @@id([blogId, tagId])
}
